group 'com.thesisdesign'
version '1.0.8'

apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.8

ext {
    springBootVersion = '1.4.2.RELEASE'
    springVersion = '4.2.4.RELEASE'
    dubboVersion = '2.5.9'
    zkclientVersion = '0.10'
    jacksonVersion = '2.6.4'

    env = System.getProperty("env") == null ? "development" : System.getProperty("env")
}

buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact (sourcesJar) {
                    classifier = 'sources'
                }
                pom.withXml {
                    asNode().dependencies.dependency.each {
                        dep ->
                            if (dep.version.text() == "unspecified") {
                                dep.getAt('groupId').get(0).setValue(project.group)
                                dep.getAt('version').get(0).setValue(project.version)
                            }
                    }
                }
            }
        }
        repositories {
            maven {
                url "/home/carloshuang/Tools/m2repository"
            }
        }
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

    version = parent.version
    group = parent.group

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    sourceSets {
        main {
            resources {
                srcDirs = ["src/main/resources/base", "src/main/resources/$env"]
            }
        }
        test {
            resources {
                srcDirs = ["src/test/resources/base", "src/test/resources/$env"]
            }
        }
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion"
        compile "org.springframework:spring-aspects:$springVersion"
        compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"

        testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    }
}

project(":madlife-api") {
    apply plugin: 'spring-boot'
    jar.archiveName = "madlife-api.jar"

    dependencies {
        compile project(":madlife-query")
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-aop:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-cache:$springBootVersion"
    }
}

project(":madlife-contract"){
    jar.archiveName = "madlife-contract.jar"

    dependencies{

    }
}

project(":madlife-query"){
    dependencies{
        compile project(":madlife-contract")
        compile project(":madlife-common")
        compile "com.alibaba:dubbo:$dubboVersion"
        compile "com.101tec:zkclient:$zkclientVersion"
    }
}

project(":madlife-common"){
    dependencies{

    }
}